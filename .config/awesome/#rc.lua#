-- Standard awesome library
require("awful")
require("awful.autofocus")
require("awful.rules")
-- Theme handling library
require("beautiful")
-- Notification library
require("naughty")
-- Widgets libary
require("vicious")

-- {{{ Variable definitions
-- Themes define colours, icons, and wallpapers
beautiful.init(awful.util.getdir("config") .. "/zenburn.lua")
--beautiful.init("~/.config/awesome/zenburn/zenburn.lua")

-- This is used later as the default terminal and editor to run.
terminal = "roxterm"
editor = "emacsclient --alternate-editor='' -c"
editor_cmd = "emacsclient --alternate-editor='' -t -e (menu-bar-mode nil) "

-- Default modkey.
-- Usually, Mod4 is the key with a logo between Control and Alt.
-- If you do not like this or do not have such a key,
-- I suggest you to remap Mod4 to another key using xmodmap or other tools.
-- However, you can use another modifier like Mod1, but it may interact with others.
modkey = "Mod4"

-- Function aliases
local exec  = awful.util.spawn
local sexec = awful.util.spawn_with_shell

-- Table of layouts to cover with awful.layout.inc, order matters.
layouts =
{
    awful.layout.suit.tile,		-- 1
    awful.layout.suit.tile.left,	-- 2
    awful.layout.suit.tile.bottom,	-- 3
    awful.layout.suit.tile.top,		-- 4
    awful.layout.suit.fair,		-- 5
    awful.layout.suit.fair.horizontal,	-- 6
    awful.layout.suit.spiral,		-- 7
    awful.layout.suit.spiral.dwindle,	-- 8
    awful.layout.suit.max,		-- 9
    awful.layout.suit.max.fullscreen,	-- 10
    awful.layout.suit.magnifier,	-- 11
    awful.layout.suit.floating		-- 12
}
-- }}}

-- {{{ Volume Config
volumeicon = widget({ type = "imagebox" })
volumeicon.image = image(beautiful.widget_vol)
volumecfg = {}
volumecfg.cardid  = 0
volumecfg.channel = "Master"
volumecfg.widget = widget({ type = "textbox", name = "volumecfg.widget", align = "right" })
-- command must start with a space!
volumecfg.mixercommand = function (command)
       local fd = io.popen("amixer -c " .. volumecfg.cardid .. command)
       local status = fd:read("*all")
       fd:close()
       local volume = string.match(status, "(%d?%d?%d)%%")
       volume = string.format("% 3d", volume)
       status = string.match(status, "%[(o[^%]]*)%]")

       if string.find(status, "on", 1, true) then
	  volume = volume .. "%"
       else   
               volume = volume .. "M"
       end
       volumecfg.widget.text = volume
end
volumecfg.update = function ()
       volumecfg.mixercommand(" sget " .. volumecfg.channel)
end
volumecfg.up = function ()
       volumecfg.mixercommand(" sset " .. volumecfg.channel .. " 2%+")
end
volumecfg.down = function ()
       volumecfg.mixercommand(" sset " .. volumecfg.channel .. " 2%-")
end
volumecfg.toggle = function ()
       volumecfg.mixercommand(" sset " .. volumecfg.channel .. " toggle")
end
volumecfg.widget:buttons(
   awful.util.table.join(
      awful.button({ }, 4, function () volumecfg.up() end),
      awful.button({ }, 5, function () volumecfg.down() end),
      awful.button({ }, 1, function () volumecfg.toggle() end)
))
volumekeys = awful.util.table.join(
   awful.key({ }, "#123", function () volumecfg.up() end),
   awful.key({ }, "#122", function () volumecfg.down() end),
   awful.key({ }, "#121", function () volumecfg.toggle() end)
)

volumecfg.update()
-- }}}

-- {{{ Tags
-- Define a tag table which hold all screen tags.
tags = {}
for s = 1, screen.count() do
    -- Each screen has its own tag table.
    tags[s] = awful.tag({ "main", "www", "IRC", "emacs", "media", 6, 7, 8, 9 }, s,
			{ layouts[12], layouts[12], layouts[7],          -- Tags: 1, 2, 3
			   layouts[2], layouts[2], layouts[6],          --       4, 5 ,6
			   layouts[12], layouts[12], layouts[12]         --       7, 8, 9
 })
end
-- }}}

-- {{{ Menu
-- Create a laucher widget and a main menu
mediamenu = {
   { "Gnome MPlayer", "gnome-mplayer", "/usr/share/icons/hicolor/16x16/apps/gnome-mplayer.png"},
   { "Exaile", "exaile", "/usr/share/pixmaps/exaile.png" },
   { "Geeqie", "geeqie", "/usr/share/pixmaps/geeqie.png" },
   { "Comix", "comix", "/usr/share/comix/images/16x16/comix.png" }
}

internetmenu = {
   { "Gajim", "gajim", "/usr/share/pixmaps/gajim.png" },
   { "FireFox", "firefox", "/usr/share/pixmaps/firefox.png" },
   { "Deluge", "deluge", "/usr/share/pixmaps/deluge.png" },
   { "WeeChat", terminal .. " -e weechat-curses", "/usr/share/gajim/data/pixmaps/agents/irc.png" }
}

myawesomemenu = {
   { "manual", terminal .. " -e man awesome" },
   { "edit config", terminal .. " -e " .. editor_cmd .. " " .. awful.util.getdir("config") .. "/rc.lua" },
   { "restart", awesome.restart },
   { "quit", awesome.quit }
}

mymainmenu = awful.menu({ items = { { "awesome", myawesomemenu, beautiful.awesome_icon },
				    { "Multimedia", mediamenu },
				    { "Internet", internetmenu },
				    { "Thunar", "thunar" },
				    { "emacs", "emacsclient --alternate-editor='' -c" },
                                    { "open terminal", terminal }
                                  }
                        })

-- }}}

-- {{{ Wibox
-- Create a textclock widget
-- mytextclock = awful.widget.textclock({ align = "right", " %a %b %d, %H:%M:%S ", 1 })
-- mytextclock = awful.widget.textclock({ align = "right" })
mytextclock = widget({ type = "textbox" })
vicious.register(mytextclock, vicious.widgets.date, " %a %b %d, %R:%S ", 1)

-- {{{ Battery state
baticon = widget({ type = "imagebox" })
baticon.image = image(beautiful.widget_bat)
-- Initialize widget
batwidget = widget({ type = "textbox" })
-- batwidget = awful.widget.progressbar()
-- batwidget:set_width(8)
-- batwidget:set_height(10)
-- batwidget:set_vertical(true)
-- batwidget:set_background_color('#494B4F')
-- batwidget:set_border_color(nil)
-- batwidget:set_color('#AECF96')
-- batwidget:set_gradient_colors({ '#AECF96', '#88A175', '#FF5656' })
-- Register widget
--vicious.register(batwidget, vicious.widgets.bat, '$2', 61, 'BAT0')
vicious.register(batwidget, vicious.widgets.bat, '$2', 61, 'BAT0')
-- }}}

-- Create a systray
mysystray = widget({ type = "systray" })

-- Create separator for later use
separator = widget({ type = "imagebox" })
separator.image = image(beautiful.widget_sep)

-- Create a wibox for each screen and add it
mywibox = {}
mypromptbox = {}
mylayoutbox = {}
mytaglist = {}
mytaglist.buttons = awful.util.table.join(
                    awful.button({ }, 1, awful.tag.viewonly),
                    awful.button({ modkey }, 1, awful.client.movetotag),
                    awful.button({ }, 3, awful.tag.viewtoggle),
                    awful.button({ modkey }, 3, awful.client.toggletag),
                    awful.button({ }, 4, awful.tag.viewnext),
                    awful.button({ }, 5, awful.tag.viewprev)
                    )
mytasklist = {}
mytasklist.buttons = awful.util.table.join(
                     awful.button({ }, 1, function (c)
                                              if not c:isvisible() then
                                                  awful.tag.viewonly(c:tags()[1])
                                              end
                                              client.focus = c
                                              c:raise()
                                          end),
                     awful.button({ }, 3, function ()
                                              if instance then
                                                  instance:hide()
                                                  instance = nil
                                              else
                                                  instance = awful.menu.clients({ width=250 })
                                              end
                                          end),
                     awful.button({ }, 4, function ()
                                              awful.client.focus.byidx(1)
                                              if client.focus then client.focus:raise() end
                                          end),
                     awful.button({ }, 5, function ()
                                              awful.client.focus.byidx(-1)
                                              if client.focus then client.focus:raise() end
                                          end))

for s = 1, screen.count() do
    -- Create a promptbox for each screen
    mypromptbox[s] = awful.widget.prompt({ layout = awful.widget.layout.horizontal.leftright })
    -- Create an imagebox widget which will contains an icon indicating which layout we're using.
    -- We need one layoutbox per screen.
    mylayoutbox[s] = awful.widget.layoutbox(s)
    mylayoutbox[s]:buttons(awful.util.table.join(
                           awful.button({ }, 1, function () awful.layout.inc(layouts, 1) end),
                           awful.button({ }, 3, function () awful.layout.inc(layouts, -1) end),
                           awful.button({ }, 4, function () awful.layout.inc(layouts, 1) end),
                           awful.button({ }, 5, function () awful.layout.inc(layouts, -1) end)))
    -- Create a taglist widget
    mytaglist[s] = awful.widget.taglist(s, awful.widget.taglist.label.all, mytaglist.buttons)

    -- Create a tasklist widget
    mytasklist[s] = awful.widget.tasklist(function(c)
                                              return awful.widget.tasklist.label.currenttags(c, s)
                                          end, mytasklist.buttons)

    -- Create the wibox
    mywibox[s] = awful.wibox({ position = "top", screen = s })
    -- Add widgets to the wibox - order matters
    mywibox[s].widgets = {
        {
            mytaglist[s],
	    mylayoutbox[s], 
	    separator,
	    mypromptbox[s],
            layout = awful.widget.layout.horizontal.leftright
        },
	batwidget.widget, baticon,
	mytextclock,
	volumecfg.widget, volumeicon, separator,
        s == 1 and mysystray or nil, separator,
        mytasklist[s],
        layout = awful.widget.layout.horizontal.rightleft
    }
end
-- }}}

-- {{{ Mouse bindings
root.buttons(awful.util.table.join(
    awful.button({ }, 3, function () mymainmenu:toggle() end),
    awful.button({ }, 4, awful.tag.viewnext),
    awful.button({ }, 5, awful.tag.viewprev)
))
-- }}}

-- {{{ Key bindings
globalkeys = awful.util.table.join(
    awful.key({ modkey,           }, "Left",   awful.tag.viewprev       ),
    awful.key({ modkey,           }, "Right",  awful.tag.viewnext       ),
    awful.key({ modkey,           }, "Escape", awful.tag.history.restore),

    awful.key({ modkey,           }, "j",
        function ()
            awful.client.focus.byidx( 1)
            if client.focus then client.focus:raise() end
        end),
    awful.key({ modkey,           }, "k",
        function ()
            awful.client.focus.byidx(-1)
            if client.focus then client.focus:raise() end
        end),
    awful.key({ modkey,           }, "w", function () mymainmenu:show(true)        end),

    -- Layout manipulation
    awful.key({ modkey, "Shift"   }, "j", function () awful.client.swap.byidx(  1)    end),
    awful.key({ modkey, "Shift"   }, "k", function () awful.client.swap.byidx( -1)    end),
    awful.key({ modkey, "Control" }, "j", function () awful.screen.focus_relative( 1) end),
    awful.key({ modkey, "Control" }, "k", function () awful.screen.focus_relative(-1) end),
    awful.key({ modkey,           }, "u", awful.client.urgent.jumpto),
    awful.key({ modkey,           }, "Tab",
        function ()
            awful.client.focus.history.previous()
            if client.focus then
                client.focus:raise()
            end
        end),

    -- Standard program
    awful.key({ modkey,           }, "Return", function () awful.util.spawn(terminal) end),
    awful.key({ modkey, "Control" }, "r", awesome.restart),
    awful.key({ modkey, "Shift"   }, "q", awesome.quit),

    awful.key({ modkey,           }, "l",     function () awful.tag.incmwfact( 0.05)    end),
    awful.key({ modkey,           }, "h",     function () awful.tag.incmwfact(-0.05)    end),
    awful.key({ modkey, "Shift"   }, "h",     function () awful.tag.incnmaster( 1)      end),
    awful.key({ modkey, "Shift"   }, "l",     function () awful.tag.incnmaster(-1)      end),
    awful.key({ modkey, "Control" }, "h",     function () awful.tag.incncol( 1)         end),
    awful.key({ modkey, "Control" }, "l",     function () awful.tag.incncol(-1)         end),
    awful.key({ modkey,           }, "space", function () awful.layout.inc(layouts,  1) end),
    awful.key({ modkey, "Shift"   }, "space", function () awful.layout.inc(layouts, -1) end),

    -- Prompt
    awful.key({ modkey },            "r",     function () mypromptbox[mouse.screen]:run() end),

    awful.key({ modkey }, "x",
              function ()
                  awful.prompt.run({ prompt = "Run Lua code: " },
                  mypromptbox[mouse.screen].widget,
                  awful.util.eval, nil,
                  awful.util.getdir("cache") .. "/history_eval")
              end)
    
)

clientkeys = awful.util.table.join(
    awful.key(	{ modkey,		}, "f",      function (c) c.fullscreen = not c.fullscreen  end),
    awful.key(	{ modkey,		}, "c",      function (c) c:kill()                         end),
    awful.key(	{ modkey, "Control"	}, "space",  awful.client.floating.toggle                     ),
    awful.key(	{ modkey, "Control"	}, "Return", function (c) c:swap(awful.client.getmaster()) end),
    awful.key(	{ modkey,		}, "o",      awful.client.movetoscreen                        ),
    awful.key(	{ modkey, "Shift"	}, "r",      function (c) c:redraw()                       end),
    awful.key(	{ modkey,		}, "n",      function (c) c.minimized = not c.minimized    end),
    awful.key(	{ modkey,		}, "m",
        function (c)
            c.maximized_horizontal = not c.maximized_horizontal
            c.maximized_vertical   = not c.maximized_vertical
        end)
)

-- Compute the maximum number of digit we need, limited to 9
keynumber = 0
for s = 1, screen.count() do
   keynumber = math.min(9, math.max(#tags[s], keynumber));
end

-- Bind all key numbers to tags.
-- Be careful: we use keycodes to make it works on any keyboard layout.
-- This should map on the top row of your keyboard, usually 1 to 9.
for i = 1, keynumber do
    globalkeys = awful.util.table.join(globalkeys,
        awful.key({ modkey }, "#" .. i + 9,
                  function ()
                        local screen = mouse.screen
                        if tags[screen][i] then
                            awful.tag.viewonly(tags[screen][i])
                        end
                  end),
        awful.key({ modkey, "Control" }, "#" .. i + 9,
                  function ()
                      local screen = mouse.screen
                      if tags[screen][i] then
                          awful.tag.viewtoggle(tags[screen][i])
                      end
                  end),
        awful.key({ modkey, "Shift" }, "#" .. i + 9,
                  function ()
                      if client.focus and tags[client.focus.screen][i] then
                          awful.client.movetotag(tags[client.focus.screen][i])
                      end
                  end),
        awful.key({ modkey, "Control", "Shift" }, "#" .. i + 9,
                  function ()
                      if client.focus and tags[client.focus.screen][i] then
                          awful.client.toggletag(tags[client.focus.screen][i])
                      end
                  end))
end

clientbuttons = awful.util.table.join(
    awful.button({ }, 1, function (c) client.focus = c; c:raise() end),
    awful.button({ modkey }, 1, awful.mouse.client.move),
    awful.button({ modkey }, 2, function (c) c:kill() end),
    awful.button({ modkey }, 3, awful.mouse.client.resize))

-- Set keys
root.keys(globalkeys)
-- }}}

-- {{{ Rules
awful.rules.rules = {
    -- All clients will match this rule.
    { rule = { },
      properties = { border_width = beautiful.border_width,
                     border_color = beautiful.border_normal,
                     focus = true,
                     keys = clientkeys,
                     buttons = clientbuttons } },
    { rule = { class = "MPlayer" },
      properties = { floating = true, tag = tags[1][5] } },
    { rule = { class = "gnome-mplayer" },
      properties = { floating = true, tag = tags[1][5] } },
    { rule = { class = "pinentry" },
      properties = { floating = true } },
    { rule = { class = "gimp" },
      properties = { floating = true } },
    -- Set Firefox to always map on tags number 2 of screen 1.
    { rule = { class = "Firefox" },
      properties = { tag = tags[1][2] } },
    { rule = { class = "Exaile" },
      properties = { tag = tags[1][5] } },
    { rule = { class = "weechat-curses" },
      properties = { tag = tags[1][3] } },

}
-- }}}

-- {{{ Signals
-- Signal function to execute when a new client appears.
client.add_signal("manage", function (c, startup)
    -- Add a titlebar
    -- awful.titlebar.add(c, { modkey = modkey })

    -- Enable sloppy focus
    c:add_signal("mouse::enter", function(c)
        if awful.layout.get(c.screen) ~= awful.layout.suit.magnifier
            and awful.client.focus.filter(c) then
            client.focus = c
        end
    end)

    if not startup then
        -- Set the windows at the slave,
        -- i.e. put it at the end of others instead of setting it master.
        -- awful.client.setslave(c)

        -- Put windows in a smart way, only if they does not set an initial position.
        if not c.size_hints.user_position and not c.size_hints.program_position then
            awful.placement.no_overlap(c)
            awful.placement.no_offscreen(c)
        end
    end
end)

client.add_signal("focus", function(c) c.border_color = beautiful.border_focus end)
client.add_signal("unfocus", function(c) c.border_color = beautiful.border_normal end)

-- Refresh volume
volumetimer = timer({ timeout = 30 })
volumetimer:add_signal("timeout", function()
				     volumecfg.update()
				  end)
volumetimer:start()
-- }}}

-- {{{ Autostart
os.execute("exec xcompmgr -c -t-7 -l-7 -r6 -o.55 -C&")
os.execute("nm-applet &")
-- }}}
